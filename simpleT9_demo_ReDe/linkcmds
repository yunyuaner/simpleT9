/*******************************************************************************
 * 
 * 版权：             中国电子科技集团公司第三十二研究所
 * 描述：            本文件定义了运行ReWorks操作系统所需头文件和宏定义，该文件被usrInit.c使用
 * 
 * 自动生成的文件。 不要进行编辑
 * 
 */
OUTPUT_ARCH(mips)
OUTPUT_FORMAT("elf32-nlittlemips", "elf32-nbigmips",
       "elf32-nlittlemips")
/*

 * The memory map looks like this:

 * +--------------------+ <- low memory

 * | .text              |

 * |        _text_start |

 * |        etext       |

 * |        ctor list   | the ctor and dtor lists are for

 * |        dtor list   | C++ support

 * |        _endtext    |

 * +--------------------+

 * | .data              | initialized data goes here

 * |        _sdata      |

 * |        _edata      |

 * +--------------------+

 * | .bss               |

 * |        _bss_start  | start of bss

 * |        _bss_end    | end of bss

 * +--------------------+ <- high memory

 */
SECTIONS
{
   . = 0xffffffff80200000;
   _load_addr = .;
  .text :
  {
   _text_start = ADDR(.text);
    *(.text*)
    . = ALIGN (16);
    /*

     * Special FreeBSD sysctl sections. (copied from x86)

     */
    __start_set_sysctl_set = .;
    *(set_sysctl_*);
    __stop_set_sysctl_set = ABSOLUTE(.);
    *(set_domain_*);
    *(set_pseudo_*);
    *(.eh_frame)
    . = ALIGN (16);
    *(.gnu.linkonce.t*)
    /*

     * C++ constructors

     */
    __CTOR_LIST__ = .;
    LONG((__CTOR_END__ - __CTOR_LIST__) / 4 - 2)
    KEEP(*(.ctors))
    LONG(0)
    __CTOR_END__ = .;
    __DTOR_LIST__ = .;
    LONG((__DTOR_END__ - __DTOR_LIST__) / 4 - 2)
    KEEP(*(.dtors))
    LONG(0)
    __DTOR_END__ = .;
    KEEP(*(.init))
    KEEP(*(.fini))
    _rodata_start = . ;
    *(.rodata*)
    *(.gnu.linkonce.r*)
    _erodata = ALIGN( 0x10 ) ;
    etext = ALIGN(0x10);
    _etext = .;
    *(.lit)
    *(.shdata)
    . = ALIGN (16);
    _endtext = .;
  }
  .rela.dyn :
    {
      *(.rela.init)
      *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
      *(.rela.fini)
      *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
      *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
      *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
      *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
      *(.rela.ctors)
      *(.rela.dtors)
      *(.rela.got)
      *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
    }
  .data :
  {
    _sdata = ADDR(.data) ;
    _data_start = ADDR(.data) ;
    *(.data*)
    *(.gnu.linkonce.d*)
    *(.gcc_except_table*)
    _gp = ALIGN(16) + 0x7FF0;
    *(.sdata)
    *(.sdata.*)
    *(.gnu.linkonce.s*)
    . = ALIGN(0x10);
    _edata = .;
  }
  .dynamic : { *(.dynamic) }
  .jcr : { *(.jcr) }
  .got : { *(.got) }
  .plt : { *(.plt) }
  .hash : { *(.hash) }
  .dynrel : { *(.dynrel) }
  .dynsym : { *(.dynsym) }
  .dynstr : { *(.dynstr) }
  .hash : { *(.hash) }
  .shbss : { *(.shbss) }
  .bss :
  {
    _bss_start = ADDR(.bss);
    *(.sbss)
    *(.scommon)
    *(.bss)
    *(.bss*)
    *(.gnu.linkonce.b*)
    *(COMMON)
    /* Align here to ensure that the .bss section occupies space up to 

    _end. Align after .bss to ensure correct alignment even if the 

    .bss section disappears because there are no input sections. */
 . = ALIGN(32 / 8);
  }
    . = ALIGN(0x1000);
  .dma (NOLOAD) :
  {
    _dma_start = ADDR(.dma);
 . = ALIGN(0x1000);
  }
    _end_dma = .;
    _end = .;
    ASSERT(_end < 0xffffffff90000000, "Memory Exceed KSEG0! You might reduce the size of DMA area.")
    ASSERT(_end + (64 << 20) < 0xffffffff90000000, "Memory Exceed KSEG0! You might reduce the size of kernel area.")
 ASSERT(_end - 0x80000000|0xffffffff00000000 + (64 << 20) < (2048 << 20), "System Memory Configuration Error! Or you might reduce the size of DMA area.")
/*    ASSERT(_end < 0x123456, "error"); */
 /* Stabs debugging sections. */
 .stab 0 : { *(.stab) }
 .stabstr 0 : { *(.stabstr) }
 .stab.excl 0 : { *(.stab.excl) }
 .stab.exclstr 0 : { *(.stab.exclstr) }
 .stab.index 0 : { *(.stab.index) }
 .stab.indexstr 0 : { *(.stab.indexstr) }
 .comment 0 : { *(.comment) }
 /* DWARF debug sections. 

	Symbols in the DWARF debugging sections are relative to the beginning 

	of the section so we begin them at 0. */
 /* DWARF 1 */
 .debug 0 : { *(.debug) }
 .line 0 : { *(.line) }
 /* GNU DWARF 1 extensions */
 .debug_srcinfo 0 : { *(.debug_srcinfo) }
 .debug_sfnames 0 : { *(.debug_sfnames) }
 /* DWARF 1.1 and DWARF 2 */
 .debug_aranges 0 : { *(.debug_aranges) }
 .debug_pubnames 0 : { *(.debug_pubnames) }
 /* DWARF 2 */
 .debug_info 0 : { *(.debug_info) }
 .debug_abbrev 0 : { *(.debug_abbrev) }
 .debug_line 0 : { *(.debug_line) }
 .debug_frame 0 : { *(.debug_frame) }
 .debug_str 0 : { *(.debug_str) }
 .debug_loc 0 : { *(.debug_loc) }
 .debug_macinfo 0 : { *(.debug_macinfo) }
 /* SGI/MIPS DWARF 2 extensions */
 .debug_weaknames 0 : { *(.debug_weaknames) }
 .debug_funcnames 0 : { *(.debug_funcnames) }
 .debug_typenames 0 : { *(.debug_typenames) }
 .debug_varnames 0 : { *(.debug_varnames) }
 /* Merge .reginfo when partial linking, omit from final link */
 /DISCARD/ : { *(.reginfo) *(.MIPS.abiflags) }
 /* These must appear regardless of . */
 .gptab.sdata : { *(.gptab.data) *(.gptab.sdata) }
 .gptab.sbss : { *(.gptab.bss) *(.gptab.sbss) }
 .pdr 0 : { *(.pdr) }
}
